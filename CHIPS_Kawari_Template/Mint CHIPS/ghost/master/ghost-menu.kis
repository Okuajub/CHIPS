#--
# Menus
#--

SakuMenuTalk : "\0\s[0]Hm?","\0\s[0]Need something?","\0\s[0]Opening the menu."

OnSakuraMenu : (
    # You can safely ignore this line. It just remembers what dialogue the user saw when changing the talk interval.
    $( if $[ $(Reference 0) != 1 ] $(setstr MenuDialogue ${SakuMenuTalk}\w4 ) else if $[ $( match ${MenuDialogue} "\_q" ) = -1 ] $(setstr MenuDialogue \_q${MenuDialogue}\_q ) )

    # The menu starts. Autoscroll disable is to prevent the menu from getting set to the bottom should the User not having a large enough balloon.
    # If you want to add any new menu options for the Sakura, this is there you would do so.
    \t\*\b2${MenuDialogue}\_q\![set,autoscroll,disable]
    \n\n[half]
    \![*]\q[Say Something,OnAITalk]
    $( if $[ ${lastTalk} ] (\n\![*]\q[Repeat Yourself,OnLastTalk]) )
    \n\n[half]
    \![*]\q[Config Menu,OnConfigMenu]
    \n\n[half]
    \![*]\q[Quit Menu,OnQuit,0]
    \n\n

    #--
    # This part is pretty script heavy, so if you're not confident you can just leave it alone.

    # Talkrate Assignment
    $(setstr @interval ${talkinterval})
    $( if $[ ${@interval} = 'Never' ] $(setstr @form "") else if $[ ${@interval} > 59 ] $( setstr @interval $[ ${@interval} / 60 ]; setstr @form minutes ) else $( setstr @form seconds ) )
    $(if $[${@interval} == 1] $(setstr @form minute))

    # Talkrate Display
    "\f[italic,true]Talkrate:" ${@interval} ${@form}\n\f[italic,default]
    \![*]\q[30s,OnAssignTalkRate,30] \![*]\q[1m,OnAssignTalkRate,60] \![*]\q[3m,OnAssignTalkRate,180]
    "\![*]\q[5m,OnAssignTalkRate,300] \![*]\q[10m,OnAssignTalkRate,600] \![*]\q[15m,OnAssignTalkRate,900] \![*]\q[Never,OnAssignTalkRate,Never]"
    \n\n[half]

    # Retrieves info about the present time
    $(setstr @weekday $(if $[$(date %w) = 0] "Sun" else if $[$(date %w) = 1] "Mon" else if $[$(date %w) = 2] "Tues" else if $[$(date %w) = 3] "Weds" else if $[$(date %w) = 4] "Thurs" else if $[$(date %w) = 5] "Fri" else if $[$(date %w) = 6] "Sat"))
    $(setstr @hour $(date %H); setstr @minute $(date %M))

    # Displays the time
    \f[italic,true]${@weekday}", %month/%day, "${@hour}":"${@minute}\f[italic,default]
)

#--
# Config Menu
#--

ConfigMenuTalk : "\0\s[0]Configuration, huh?"

OnConfigMenu : (
    \t\*\b2${ConfigMenuTalk}\w4\_q\![set,autoscroll,disable]
    \n\n[half]
    \![*]\q[Change Name,OnChangeName]
    \n
    \![*]\q[Change Pronouns,OnChangePronouns]
    \n
    \![*]"Uninstall: "\q[$( if $[${vanishFlag} = 1] $(echo "ON") else $(echo "OFF") ),OnToggleVanish]
    \n\n[half]
    \![*]\q[Back,OnSakuraMenu]
)

# This is what your Ghost will say when selecting the change name option.
talk.OnChangeName : "\0\s[0]Alright. What would you like me to call you?"
# A response for if the name was the same as the name they already had.
talk.UnchangedName : "\0\s[0]Hm. That's the same as before. But alright."
# A response for if the user didn't input anything.
talk.NoName : "\0\s[0]I'll just go with "${username}", then."
# A response for if the User inputs a name which is the same as the characters' names.
talk.SelfName : "\0\s[0]That could get confusing. You got a nickname or something?"
# A response for if the new username cleared all checks.
talk.OnNameChanged : "\0\s[0]"${username}", huh? Got it."

# This is what your Ghost will say when selecting the change pronouns option.
talk.OnChangePronouns : "\0\s[0]Can do. What's right, then?"
# What your Ghost says when providing the default pronouns.
talk.OnChoosePronouns : "\0\s[0]Which of these would you like to proceed with?"
# When successfully changing pronouns.
talk.OnPronounsChanged : "\0\s[0]Thanks. I've got it down now."
# When choosing a pronoun set to delete.
talk.OnDeletePronouns : "\0\s[0]Which one shouldn't I use?"
# When successsfully deleting a set of pronouns.
talk.OnPronounsDeleted : "\0\s[0]Alright. I'll remember not to use those."

# When inputting custom pronouns
talk.Pronouns1 : "\0\s[0]What pronoun would you use in place of 'he', 'she', or 'they'?"
talk.Pronouns2 : "\0\s[0]And what pronoun would you use in place of 'him', 'her', or 'them'?"
talk.Pronouns3 : "\0\s[0]How about 'his', 'her', or 'their'?"
talk.Pronouns4 : "\0\s[0]What pronoun would you use in place of 'his', 'hers', or 'theirs'?"
talk.Pronouns5 : "\0\s[0]Last one. What pronoun would you use in place of 'himself', 'herself', or 'themself'?"
talk.Pronouns6 : "\0\s[0]Alright. Last question. Is this set singular or plural? '"${temp.they}" are tired.' is an example of these being used in the plural."

# When checking with the User if they typed their pronouns right.
talk.OnConfirmPronouns : "\0\s[0]So, is "${temp.they}/${temp.them}/${temp.their}/${temp.theirs}/${temp.themself}" correct?"
# When the User cancels the pronoun change.
talk.OnExitPronouns : "\0\s[0]No problem."
# When a user tests their pronouns. If you add another, remember to use the '$user.they[${i}]' format, or else it won't print right.
talk.OnTestPronouns : (
    "I heard that "${username}" went to the animal shelter recently. "$(cap $user.they[${i}])" saw a bunch of cute animals that "$user.they[${i}]" wanted to be "$user.theirs[${i}]". "
    $(cap $user.their[${i}])" face lit up looking at them. At least, that's what I heard about "$user.them[${i}]". I hope "$user.they[${i}] $(SP 'is' 'are') "taking care of "$user.themself[${i}]"."
)

OnAssignTalkRate : (
    $( setstr talkinterval $(Reference 0); set @dialogue $(Reference 1) )
    "\![raise,OnSakuraMenu,1]"
)

# This handles quitting dialogue.
OnQuit : $(
    if $[$(Reference 0) == 0] ${SakuraQuit}
    else ${KeroQuit}
)
# Quitting dialogue for menus of various kinds.
SakuraQuit : "\0\s[0]Mhm.", "\0\s[0]Sure."

# Repeat last talk.
OnLastTalk : ${lastTalk}



#--
# Kero Menu
#--

KeroMenuTalk : "\1\s[15]What's up?","\1\s[15]What can I do for you, "${username}"?"

KeroQuit : "\1\s[10]Thanks for checking in!", "\1\s[16]Talk to you later!"

OnKeroMenu : (
    \1\t\*\b2${KeroMenuTalk}\w4\_q\![set,autoscroll,disable]
    \n\n[half]
    \![*]\q[Tell me about Yourselves,OnIntroduceSelf]
    \n
    \![*]\q[Tell me about Ukagaka,OnIntroduceUkagaka]
    \n
    \![*]\q[Tell me about Kawari,OnIntroduceKawari]
    \n
    \![*]\q[Tell me about YAYA,OnIntroduceYAYA]
    # 'devmode' is an entry to engage development mode. To engage it, put '$(setstr devmode 1)' in the script input.
    $(if $[${devmode} = 1] $(echo \n\n[half]\![*]\q[Debug Menu,OnDebugMenu]))
    \n\n[half]
    \![*]\q[Quit Menu,OnQuit,1]
)

OnIntroduceSelf : (
    "\1\t\*\s[10]\b2Well sure! "
    "\1\s[10]Sentinel and I were brought out here to help you learn about Kawari, and making Ghosts. This is kind of a part-time job for us at the moment.\w8\n"
    "I'm CHIPtest. All capital 'CHIP', lowercase 'test'. But most people just call me Chip.\w8\w4 "
    "\1\s[15]I'm a computer programmer, and I really like Ukagaka! I also enjoy playing rhythm games and learning Japanese!\w8\w4 "
    "\1\s[16]And, the tough guy over there is my romantic partner, Sentinel.\w8\w4\n\n[half]"

    "\0\s[0]Hey.\w8\w8\n\n[half]"

    "\1\s[10]He's more of the outdoorsy type, and tends to take a more reserved role social situations. \w8\w8"
    "\1\s[15]We met at work, and honestly I didn't even notice that he wasn't an outgoing person. I just kept coming back to talk to him, oblivious.\w8\n\n[half]"

    "\0\s[0]It's not like you were bothering me.\w8\w8\n\n[half]"

    "\1\s[12]Oh, I hope I didn't imply that you were!- Or that I was- I mean...\w2\n\n[half]"

    "\0\s[0]That \w3is something I always liked about you. Heart on your sleeve type."

    "\1\s[11]Well... \w4\s[15]Thanks.\w8 "
    \n\n[half]
    \![*]\q[Back,OnKeroMenu]
)

OnIntroduceUkagaka : (
    "\1\t\*\s[10]\b2An Ukagaka, also known as a Ghost, is a type of desktop toy intended to keep you company.\w8\w4 "
    "A lot of Japanese Ukagaka do this by standing there and talking to the user.\w8\w8\w8\w4\n\n[half]"

    "But English Ghosts tend to be extremely diverse due to the higher barrier to entry to create a Ghost in English.\w4 "
    "\1\s[15]You can learn more about that in the YAYA explanation in my menu.\w8\w8\w8\w2\n\n[half]"

    "\1\s[10]Ukagaka originate in early 2000s Otaku culture. As such they were often filled with layered in-jokes, unusual dialects, and, of course, they were in Japanese.\w8\w8\n\n[half]"
    "This made Ukagaka difficult for non-Japanese speakers to use and develop. Some English users still used the music player Ghost FLELE which didn't require knowing Japanese to operate.\w8\w8\w4\n\n[half]"
    
    "But, in the 2010s, English ghosts started to be broken into. Especially after the first thorough English Ghost creation walkthrough was created by Zarla. "
    "\1\s[10]We, as the CHIPS template, are intended to be used as a kind of template!\w8\w8\w8\n\n[half]"
    "Although, we're more designed as middleware. Which means that our code handles the more technical stuff, and the User can just focus on writing their unique features.\w8 "
    "We're called a template because no other English Ghost foundations use a middleware-like structure as far as we know.\w8\w8\w4\n\n[half]"
    "So distinguishing us from other English Ghost bases would, honestly, probably be "
    "\f[italic,true]more\f[italic,default] confusing for new users trying to choose a base to work from than just calling us a template like the others.\w8\w8\n\n[half]"

    "\1\s[15]\w8\w8Hopefully that makes sense!"
    \n\n[half]
    \![*]\q[Back,OnKeroMenu]
)

OnIntroduceKawari : (
    "\1\t\*\s[10]\b2Kawari is the programming language that this Ghost is based in.\s[15] Kawari's main focus is to make writing Ghosts easy, and to make Ghost dialogue diverse!\w8 "
    "\s[10]It achieves this with its unique entry system. Instead of having many different variable types, Kawari has one type of variable, which can hold anything and be called anywhere.\w8\w8\w8\n\n[half]"

    "This, essentially, makes Kawari function a lot like many, many arrays (and like envelopes, if you're familiar with the term) that can happen at any time.\w2 "
    "That, in combination with layering these different entries, means that Kawari can turn many different entry calls into one single but varied dialogue, easily! How useful.\w8\w8\w8\w8\n\n[half]"

    "For a little history, Kawari has been around since at least 2001. "
    "Kawari's 7th phase, the earliest phase recorded that's easily accessible, was worked on in early 2002, too.\w8 "
    "\1\s[10]Kawari was considered hard to work with in the early Phases, including Phase 7. Issues in its code from multiple successive changes and a lack of coding flexibility were cited as reasons why\w8\w8.\w4\n\n[half]"

    "The difficulties in creating and maintaining Kawari are a whole story to themselves. Which, you can read about in the Kawari Programming Reference! "
    "I highly suggest doing so if you think Kawari as a whole is as interesting as I do.\w8\w8\w8\w8\n\n[half]"

    "\1\s[15]Anyway.\w8\w8\1\s[10] Phase 8, an entire overhaul of Kawari, was available sometime in July of 2002 and is the version you're on now! (well, unless it makes a surprise comeback.)\w8 "
    "Phase 8 attempted to rework the issues Kawari was having. I definitely am glad it's what we have to work with now!\w8 "

    "\1\s[10]Development on Kawari stopped sometime in 2008. That's the latest year we have recorded for changes and the last year on the license.\w8\w8\w4\n\n[half]"
    "But, Kawari \f[italic,true]is\f[italic,default] open source! So, if someone wanted to continue it, it's not out of the question. It'd just be a fork of the original.\w6 "
    "\1\s[15]If you're familiar with C++ and STL, maybe you could give it a look?\w4"
    \n\n[half]
    \![*]\q[Back,OnKeroMenu]
)

OnIntroduceYAYA : (
    "\1\t\*\s[10]\b2YAYA is a continuation of an older Ghost programming language called AYA. Almost all English Ghosts are based in YAYA, and YAYA itself is based in C.\w8 "
    "It's also still being maintained to this day, and has many contributors to keep it alive.\w8\w8\w4\n\n[half]"

    "It's the most popular Ghost language in English, due to its easy compatibility with English character sets and the fact it's still being updated.\w4 "
    "The main thing about making a Ghost in YAYA is that there is no middleware written for YAYA. This means one often has to know at least a little coding to get started.\w8\w8\w8\n\n[half]"

    "This stops quite a few people from getting into Ghost development. But it also means a lot of our Ghosts over here are more involved than the traditional Ghost!\w8\w8\w8\n\n[half]"

    "There are a lot of different types of English Ghosts, from lightly coded to deeply coded, feature-light to feature-dense, talk-light to talk-heavy, and so on.\w4 "
    "It all stems from the fact that YAYA itself was written primarily with coding in mind.\1\s[15] Isn't that fascinating?\n\n[half]"
    "I hope that as you use this template it'll make it easier for you to get into Ghost development than ever before.\w4"
    \n\n[half]
    \![*]\q[Back,OnKeroMenu]
)

OnIntroduceKosui : (
    "\1\t\*\s[10]\b2Kosui is the debugging terminal packaged with Kawari.\w2 It's not as intimidating as it might seem.\w8 "
    "Kosui is used to find errors and test your code. It can output log files, or (with the right code) log directly to the terminal.\w8 "
    "You can learn more about Kosui's operations in the Kosui Manual in Kawari's documentation."
    \n\n[half]
    \![*]\q[Back,OnDebugMenu]
)

# Having a debug menu can be helpful as you can hide it from the user as needed.
OnDebugMenu : (
    "\1\t\*\b2\s[12]\b2Uh oh, something go wrong? This menu's here to handle hold debugging functions.\s[10] Alright. Here's the debug options.\n\n[half]"\w4\_q\![set,autoscroll,disable]
    \![*]\q[Show All Saved Entries,OnShowData]
    \n
    \![*]\q[Test Variable,OnTestVariable]
    \n
    \n[half]
    \![*]\q[Open Kosui Debugger,OnOpenKosui]
    \n
    \![*]\q[Tell me about Kosui,OnIntroduceKosui]
    \n\n[half]
    \![*]\q[Quit Menu,OnQuit,1]
)

# Shows the current user data. Note: When more than 1 value is saved to one entry, it will randomly pick from said entry, as any entry call would.
OnShowData : $(
    foreach @entries savedataParam $( echo "\b2"${@entries}": "; echo ${${@entries}}"\n" )
)

# This entry can be used to test code on demand.
OnTestVariable : (
    "\1\s[10]Testing!\n\n[half]"
)

# This won't work if you don't have Kosui in your ghost\master folder.
OnOpenKosui : (
    "\1\s[10]\![open,file,kosui.exe]Sure thing. Kosui, coming up."
)